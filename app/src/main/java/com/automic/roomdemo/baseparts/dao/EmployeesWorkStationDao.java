package com.automic.roomdemo.baseparts.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.automic.roomdemo.buworkroom.bean.EmployeesWorkStation;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "EMPLOYEES_WORK_STATION".
*/
public class EmployeesWorkStationDao extends AbstractDao<EmployeesWorkStation, Long> {

    public static final String TABLENAME = "EMPLOYEES_WORK_STATION";

    /**
     * Properties of entity EmployeesWorkStation.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Tell = new Property(2, String.class, "tell", false, "TELL");
        public final static Property Section = new Property(3, String.class, "section", false, "SECTION");
        public final static Property Group = new Property(4, String.class, "group", false, "GROUP");
        public final static Property WorkStaionId = new Property(5, String.class, "workStaionId", false, "WORK_STAION_ID");
        public final static Property Sex = new Property(6, int.class, "sex", false, "SEX");
        public final static Property Imageurl = new Property(7, String.class, "imageurl", false, "IMAGEURL");
    }


    public EmployeesWorkStationDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeesWorkStationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYEES_WORK_STATION\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"TELL\" TEXT," + // 2: tell
                "\"SECTION\" TEXT," + // 3: section
                "\"GROUP\" TEXT," + // 4: group
                "\"WORK_STAION_ID\" TEXT UNIQUE ," + // 5: workStaionId
                "\"SEX\" INTEGER NOT NULL ," + // 6: sex
                "\"IMAGEURL\" TEXT);"); // 7: imageurl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYEES_WORK_STATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EmployeesWorkStation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String tell = entity.getTell();
        if (tell != null) {
            stmt.bindString(3, tell);
        }
 
        String section = entity.getSection();
        if (section != null) {
            stmt.bindString(4, section);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(5, group);
        }
 
        String workStaionId = entity.getWorkStaionId();
        if (workStaionId != null) {
            stmt.bindString(6, workStaionId);
        }
        stmt.bindLong(7, entity.getSex());
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(8, imageurl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EmployeesWorkStation entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String tell = entity.getTell();
        if (tell != null) {
            stmt.bindString(3, tell);
        }
 
        String section = entity.getSection();
        if (section != null) {
            stmt.bindString(4, section);
        }
 
        String group = entity.getGroup();
        if (group != null) {
            stmt.bindString(5, group);
        }
 
        String workStaionId = entity.getWorkStaionId();
        if (workStaionId != null) {
            stmt.bindString(6, workStaionId);
        }
        stmt.bindLong(7, entity.getSex());
 
        String imageurl = entity.getImageurl();
        if (imageurl != null) {
            stmt.bindString(8, imageurl);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public EmployeesWorkStation readEntity(Cursor cursor, int offset) {
        EmployeesWorkStation entity = new EmployeesWorkStation( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // tell
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // section
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // group
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // workStaionId
            cursor.getInt(offset + 6), // sex
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // imageurl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EmployeesWorkStation entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTell(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSection(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGroup(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWorkStaionId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setSex(cursor.getInt(offset + 6));
        entity.setImageurl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EmployeesWorkStation entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EmployeesWorkStation entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EmployeesWorkStation entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
